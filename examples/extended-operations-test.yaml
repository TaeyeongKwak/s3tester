---
# S3 Tester - 추가된 Operation 테스트 설정
# 모든 추가 구현된 S3 작업을 테스트합니다.
# 
# Environment Variables (optional overrides):
#   S3TESTER_ENDPOINT_URL: S3 endpoint URL (default: http://localhost:9000)
#   S3TESTER_REGION: AWS region (default: us-east-1)

config:
  endpoint_url: "${S3TESTER_ENDPOINT_URL:-http://localhost:9000}"  # MinIO 또는 다른 S3 호환 서비스
  region: "${S3TESTER_REGION:-us-east-1}"
  path_style: true  # MinIO와 같은 서비스를 위해 path style URL 사용
  credentials:
    - name: "default"
      access_key: "PZMCf6oqkmeBEugp0WCl"
      secret_key: "FZSe5aUOrKHS7PPZhFNYwI7hOxZszywo8jPIOUzo"

test_cases:
  parallel: false
  groups:
    # 1. 버킷 관련 추가 작업 테스트
    - name: "bucket-extended-operations"
      credential: "default"
      before_test:
        # 테스트용 버킷 생성
        - operation: "CreateBucket"
          parameters:
            bucket: "bucket-extended-test"
      test:
        # ListObjectsV2 테스트
        - operation: "ListObjectsV2"
          parameters:
            bucket: "bucket-extended-test"
            prefix: "test/"
            max_keys: 10
          
        # GetBucketLocation 테스트
        - operation: "GetBucketLocation"
          parameters:
            bucket: "bucket-extended-test"
          
        # 버킷 버전 관리 테스트
        - operation: "PutBucketVersioning"
          parameters:
            bucket: "bucket-extended-test"
            status: "Enabled"
          
        - operation: "GetBucketVersioning"
          parameters:
            bucket: "bucket-extended-test"
          
        # 버킷 태깅 테스트
        - operation: "PutBucketTagging"
          parameters:
            bucket: "bucket-extended-test"
            tags:
              environment: "testing"
              project: "s3tester"
              department: "engineering"
          
        - operation: "GetBucketTagging"
          parameters:
            bucket: "bucket-extended-test"
          
        - operation: "DeleteBucketTagging"
          parameters:
            bucket: "bucket-extended-test"
      after_test:
        # 테스트 후 버킷 정리
        - operation: "DeleteBucket"
          parameters:
            bucket: "bucket-extended-test"
    
    # 2. 객체 관련 추가 작업 테스트
    - name: "object-extended-operations"
      credential: "default"
      before_test:
        # 테스트용 버킷 생성
        - operation: "CreateBucket"
          parameters:
            bucket: "object-extended-test"
        
        # 테스트용 객체 업로드
        - operation: "PutObject"
          parameters:
            bucket: "object-extended-test"
            key: "test-object.txt"
            body: "This is test content for object extended operations testing."
            content_type: "text/plain"
      test:
        # 객체 태깅 테스트
        - operation: "PutObjectTagging"
          parameters:
            bucket: "object-extended-test"
            key: "test-object.txt"
            tags:
              type: "document"
              status: "active"
              owner: "tester"
          
        - operation: "GetObjectTagging"
          parameters:
            bucket: "object-extended-test"
            key: "test-object.txt"
        
        # 객체 복사 테스트
        - operation: "CopyObject"
          parameters:
            source_bucket: "object-extended-test"
            source_key: "test-object.txt"
            bucket: "object-extended-test"
            key: "copied-object.txt"
            metadata:
              copied: "true"
              source: "original"
            metadata_directive: "REPLACE"
        
        # 복사된 객체 확인
        - operation: "GetObject"
          parameters:
            bucket: "object-extended-test"
            key: "copied-object.txt"
        
        # 태그 삭제 테스트
        - operation: "DeleteObjectTagging"
          parameters:
            bucket: "object-extended-test"
            key: "test-object.txt"
        
        # 태그 삭제 확인
        - operation: "GetObjectTagging"
          parameters:
            bucket: "object-extended-test"
            key: "test-object.txt"
      after_test:
        # 테스트 객체 삭제
        - operation: "DeleteObject"
          parameters:
            bucket: "object-extended-test"
            key: "test-object.txt"
        
        - operation: "DeleteObject"
          parameters:
            bucket: "object-extended-test"
            key: "copied-object.txt"
        
        # 버킷 삭제
        - operation: "DeleteBucket"
          parameters:
            bucket: "object-extended-test"
    
    # 3. 버킷 정책 테스트
    - name: "bucket-policy-operations"
      credential: "default"
      before_test:
        # 테스트용 버킷 생성
        - operation: "CreateBucket"
          parameters:
            bucket: "bucket-policy-test"
      test:
        # 버킷 정책 설정 테스트
        - operation: "PutBucketPolicy"
          parameters:
            bucket: "bucket-policy-test"
            policy:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Principal: "*"
                  Action: "s3:GetObject"
                  Resource: "arn:aws:s3:::bucket-policy-test/*"
        
        # 버킷 정책 조회 테스트
        - operation: "GetBucketPolicy"
          parameters:
            bucket: "bucket-policy-test"
        
        # 버킷 정책 삭제 테스트
        - operation: "DeleteBucketPolicy"
          parameters:
            bucket: "bucket-policy-test"
        
        # 정책 삭제 확인
        - operation: "GetBucketPolicy"
          parameters:
            bucket: "bucket-policy-test"
          expected_result:
            success: true  # NoSuchBucketPolicy는 성공으로 처리됨
      after_test:
        # 버킷 삭제
        - operation: "DeleteBucket"
          parameters:
            bucket: "bucket-policy-test"
    
    # 4. 버전 관리 및 객체 버전 테스트
    - name: "object-versioning-test"
      credential: "default"
      before_test:
        # 테스트용 버킷 생성
        - operation: "CreateBucket"
          parameters:
            bucket: "version-test"
        
        # 버전 관리 활성화
        - operation: "PutBucketVersioning"
          parameters:
            bucket: "version-test"
            status: "Enabled"
      test:
        # 버전 1 객체 업로드
        - operation: "PutObject"
          parameters:
            bucket: "version-test"
            key: "versioned-object.txt"
            body: "Version 1 content"
        
        # 버전 2 객체 업로드 (같은 키)
        - operation: "PutObject"
          parameters:
            bucket: "version-test"
            key: "versioned-object.txt"
            body: "Version 2 content"
        
        # 버전 3 객체 업로드 (같은 키)
        - operation: "PutObject"
          parameters:
            bucket: "version-test"
            key: "versioned-object.txt"
            body: "Version 3 content"
        
        # 객체 버전 목록 조회
        - operation: "ListObjectVersions"
          parameters:
            bucket: "version-test"
            prefix: "versioned-object.txt"
      after_test:
        # 모든 버전 객체 삭제 필요 (실제 사용시 ListObjectVersions 결과에서 version_id를 가져와 삭제)
        - operation: "DeleteObject"
          parameters:
            bucket: "version-test"
            key: "versioned-object.txt"
        
        # 버킷 삭제
        - operation: "DeleteBucket"
          parameters:
            bucket: "version-test"
